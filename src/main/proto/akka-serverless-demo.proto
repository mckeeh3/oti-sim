syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "cloudstate/entity_key.proto";

package service;

message AddCustomerLocationCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
    string accessToken = 2;
}

message RemoveCustomerLocationCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
}

message ActivateDeviceCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
    string deviceId = 2;
}

message AssignRoomCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
    string deviceId = 2;
    string room = 3;
}

message RemoveDeviceCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
    string deviceId = 2;
}

message ToggleNightlightCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
    string deviceId = 2;
}

message Device {
    string deviceId = 1;
    bool activated = 2;
    string customerLocationId = 3;
    string room = 4;
    bool nightlightOn = 5;
}

message Devices {
    repeated Device device = 1;
}

message GetDevicesCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
}

service WirelessMeshService {
    rpc AddCustomerLocation(AddCustomerLocationCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/add-customer-location",
            body: "*",
        };
    }

    rpc RemoveCustomerLocation(RemoveCustomerLocationCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/remove-customer-location",
            body: "*",
        };
    }

    rpc ActivateDevice(ActivateDeviceCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/activate-device",
            body: "*",
        };
    }

    rpc RemoveDevice(RemoveDeviceCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/remove-device",
            body: "*",
        };
    }

    rpc AssignRoom(AssignRoomCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/assign-room",
            body: "*",
        };
    }

    rpc GetDevices(GetDevicesCommand) returns (Devices) {
        option (google.api.http) = {
            get: "/wirelessmesh/get-devices",
        };
    }

    rpc ToggleNightlight(ToggleNightlightCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/toggle-nightlight",
            body: "*",
        };
    }